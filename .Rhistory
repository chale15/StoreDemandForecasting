x = expression(sigma^2), y = "Density", color = "") +
scale_color_manual(values = c(expression(sigma_1^2) = "cornflowerblue", expression(sigma_1^2) = "green4"))+
x <- seq(2, 500 , by = 0.01)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(2, 50 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(0, 10 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(0, 2.5 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(0, 2 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(0.0001, 2 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
x <- seq(0.0001, 1.75 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "green4"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
sigma_1_draws <- rinvgamma(100000, post_vals_1[1], post_vals_1[2])
sigma_2_draws <- rinvgamma(100000, post_vals_2[1], post_vals_2[2])
ratio <- sigma_1_draws/sigma_2_draws
ggplot(ratio, aes(y = ratio)) +
geom_density(aes(color = 'plum3'), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, "/", sigma[2]^2)),
x = 'Ratio',
y = "Density", color = "") +
theme_minimal()
sigma_1_draws <- rinvgamma(100000, post_vals_1[1], post_vals_1[2])
sigma_2_draws <- rinvgamma(100000, post_vals_2[1], post_vals_2[2])
ratio <- sigma_1_draws/sigma_2_draws
ggplot() +
geom_density(aes(y = ratio, color = 'plum3'), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, "/", sigma[2]^2)),
x = 'Ratio',
y = "Density", color = "") +
theme_minimal()
sigma_1_draws <- rinvgamma(100000, post_vals_1[1], post_vals_1[2])
sigma_2_draws <- rinvgamma(100000, post_vals_2[1], post_vals_2[2])
ratio <- sigma_1_draws/sigma_2_draws
ggplot() +
geom_density(aes(x = ratio, color = 'plum3'), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, "/", sigma[2]^2)),
x = 'Ratio',
y = "Density", color = "") +
theme_minimal()
sigma_1_draws <- rinvgamma(100000, post_vals_1[1], post_vals_1[2])
sigma_2_draws <- rinvgamma(100000, post_vals_2[1], post_vals_2[2])
ratio <- sigma_1_draws/sigma_2_draws
ggplot() +
geom_density(aes(x = ratio), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, "/", sigma[2]^2)),
x = 'Ratio',
y = "Density", color = "") +
theme_minimal()
fake_f_test <- mean(ratio < 0.54)
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
post_params_v
x <- seq(0.0001, 1.75 , by = 0.0001)
df_invgamma <- data.frame(x = x,
post_1 = dinvgamma(x, post_vals_1[1], post_vals_1[2]),
post_2 = dinvgamma(x, post_vals_2[1], post_vals_2[2]))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = post_1, color = "sigma_1"), lwd = 2) +
geom_line(aes(y = post_2, color = "sigma_2"), lwd = 2) +
labs(title = expression(paste("Posterior Distributions of ", sigma[1]^2, " and ", sigma[2]^2)),
x = expression(sigma^2),
y = "Density", color = "") +
scale_color_manual(values = c("sigma_1" = "cornflowerblue", "sigma_2" = "plum3"),
labels = c(expression(sigma[1]^2), expression(sigma[2]^2))) +
theme_minimal()
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 50 , by = 0.0001)
post_ig <- data.frame(x = x,
v = dinvgamma(x, post_params_v[1], post_params_v[2]))
ggplot(post_ig, aes(x = x)) +
geom_line(aes(y = v), color = 'cornflower_blue', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", nu, " = ", kappa^1.5)),
x = expression(sigma^2),
y = "Density", color = "") +
theme_minimal()
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 50 , by = 0.0001)
post_ig <- data.frame(x = x,
v = dinvgamma(x, post_params_v[1], post_params_v[2]))
ggplot(post_ig, aes(x = x)) +
geom_line(aes(y = v), color = 'cornflowerblue', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", nu, " = ", kappa^1.5)),
x = expression(sigma^2),
y = "Density", color = "") +
theme_minimal()
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 50 , by = 0.0001)
post_ig <- data.frame(x = x_3,
v = dinvgamma(x, post_params_v[1], post_params_v[2]))
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 50 , by = 0.0001)
post_ig <- data.frame(x = x_3,
v = dinvgamma(x_3, post_params_v[1], post_params_v[2]))
ggplot(post_ig, aes(x = x)) +
geom_line(aes(y = v), color = 'cornflowerblue', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", nu, " = ", kappa^1.5)),
x = expression(sigma^2),
y = "Density", color = "") +
theme_minimal()
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 50 , by = 0.0001)
post_ig <- data.frame(x = x_3,
v = dinvgamma(x_3, post_params_v[1], post_params_v[2]))
ggplot(post_ig, aes(x = x)) +
geom_line(aes(y = v), color = 'cornflowerblue', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", nu, " = ", kappa^1.5)),
x = expression(paste(nu, " = ", kappa^1.5)),
y = "Density", color = "") +
theme_minimal()
n_3 <- 25
prior_params_v <- c(2.01, 20)
post_params_v <- c((prior_params_v[1]+n_3), (prior_params_v[2] + 338.65))
x_3 <- seq(0.0001, 30 , by = 0.0001)
post_ig <- data.frame(x = x_3,
v = dinvgamma(x_3, post_params_v[1], post_params_v[2]))
ggplot(post_ig, aes(x = x)) +
geom_line(aes(y = v), color = 'cornflowerblue', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", nu, " = ", kappa^1.5)),
x = expression(paste(nu, " = ", kappa^1.5)),
y = "Density", color = "") +
theme_minimal()
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rweibull(1, 1.5, k_vals)
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- replicate(100000, rweibull(1, shape = 1.5, scale = k_vals))
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
}
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
}
ggplot() +
geom_density(aes(x = x_vals), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|data,"~kappa),
y = "Density", color = "") +
theme_minimal()
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
mu <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
mu[i] <- k_vals[i]*gamma(1 + 1/1.5)
}
ggplot() +
geom_density(aes(x = x_vals), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|data,"~kappa),
y = "Density", color = "") +
theme_minimal()
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
mu <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
mu[i] <- k_vals[i]*gamma(1 + 1/1.5)
}
ggplot() +
geom_density(aes(x = mu), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|data,"~kappa),
y = "Density", color = "") +
theme_minimal()
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
mu <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
mu[i] <- k_vals[i]*gamma(1 + 1/1.5)
}
ggplot() +
geom_density(aes(x = mu), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|"~kappa),
y = "Density", color = "") +
theme_minimal()
mean(x_vals < 2)
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
mu <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
mu[i] <- k_vals[i]*gamma(1 + 1/1.5)
}
ggplot() +
geom_density(aes(x = x_vals), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|"~kappa),
y = "Density", color = "") +
theme_minimal()
v_draws <- rinvgamma(100000, post_params_v[1], post_params_v[2])
k_vals <- v_draws^(1/1.5)
x_vals <- rep(0, 100000)
mu <- rep(0, 100000)
for (i in 1:length(k_vals)) {
x_vals[i] <- rweibull(1, shape = 1.5, scale = k_vals[i])
mu[i] <- k_vals[i]*gamma(1 + 1/1.5)
}
ggplot() +
geom_density(aes(x = mu), color = 'plum3', lwd = 2) +
labs(title = expression(paste("Posterior Distribution of ", mu)),
x = expression(mu~"|"~kappa),
y = "Density", color = "") +
theme_minimal()
bad_phone_prob <- mean(x_vals < 2)
#load the library for the inverse gamma distribution
library(invgamma)
# PRIOR PARAMETERS
# Prior parameters for mu:
lambda <- 5
tau2 <- 2 #relatively large given the range of the perception score is from 1-7
# Prior parameters for sigma2:
# if typical range for percpetion score is 1-7,
# then an approximate standard deviation would be 6/6
# so an approximate variance would be 1
gamma <- 2.05
phi <- 1.05
#prior expected value of variance:
phi/(gamma-1)
# Plot the prior distributions to make sure they seem reasonable
par(mfrow=c(1,2))
curve(dnorm(x, lambda, sqrt(tau2)), xlim=c(-1, 11), ylab="prior density", main=expression(pi(mu)), xlab=expression(mu))
curve(dinvgamma(x, gamma, phi), xlim=c(0, 3), ylab="prior density", main=expression(pi(sigma^2)), xlab=expression(sigma^2))
# COLLECT DATA
x.MZ <- c(4.1, 4.2, 3.9, 3.7, 4.5, 3.8, 3.7, 4, 3.9, 4.1, 4.0, 3.6, 4.1, 4.1, 3.9, 4.1, 4.8, 4, 4.1, 4.3, 4.3, 4.3, 4.5, 3.8, 3.9, 4.4, 3.7, 4.6, 4.1, 4.2, 4.6, 3.5, 4.1, 4, 4.1, 3.6, 3.4, 4.4, 4.8, 4.1, 4.5, 4, 4.4, 4.5, 3.9, 3.5, 3.9, 4.2, 3.9, 4.1, 4, 3.7, 4.1, 4.1, 4.3, 4.1, 4.0, 3.8, 3.4)
n.MZ <- length(x.MZ)
x.XB <- c(4.3, 3.9, 4.5, 4.5, 4.7, 3.9, 4.5, 3.7, 3.8, 4.4, 4.9, 3.9, 3.9, 4, 4.1, 4.3, 3.8, 4.6, 4.6, 5.2, 4.7, 4, 3.9, 4.4, 3.9, 4.8, 4.4, 4.7, 5.5, 4.4, 4.7)
n.XB <- length(x.XB)
#Starting values (This example has extreme starting values just for illustrative purposes)
mu.MZ <- 5
sigma2.MZ <- 1
mu.XB <- 5
sigma2.XB <- 1
# initializations for the Gibbs Sampling Algorithm
iters <- 10000
#saved vectors for mill/genz population
mu.MZ.save <- rep(0, iters)
mu.MZ.save[1] <- mu.MZ
sigma2.MZ.save <- rep(0, iters)
sigma2.MZ.save[1] <- sigma2.MZ
#saved vectors for genx/boom population
mu.XB.save <- rep(0, iters)
mu.XB.save[1] <- mu.XB
sigma2.XB.save <- rep(0, iters)
sigma2.XB.save[1] <- sigma2.XB
#Gibbs Sampling Algorithm
for(t in 2:iters){
# Full conditional of mu.MZ (update the value of the parameters)
lambda.MZ.p <- (tau2*sum(x.MZ) + sigma2.MZ*lambda)/(tau2*n.MZ + sigma2.MZ)
tau2.MZ.p <- sigma2.MZ*tau2/(tau2*n.MZ + sigma2.MZ)
#sample a new value of mu.MZ
mu.MZ <- rnorm(1, lambda.MZ.p, sqrt(tau2.MZ.p))
#save the value of mu.MZ
mu.MZ.save[t] <- mu.MZ
# full conditional of sigma2.MZ (update the value of the parameters)
gamma.MZ.p <- gamma + n.MZ/2
phi.MZ.p <- phi + sum((x.MZ - mu.MZ)^2 )/2
#sample new value of sigma2.MZ
sigma2.MZ <- rinvgamma(1, gamma.MZ.p, phi.MZ.p)
#save the value of sigma2.MZ
sigma2.MZ.save[t] <- sigma2.MZ
# Full conditional of mu.XB (update the value of the parameters)
lambda.XB.p <- (tau2*sum(x.XB) + sigma2.XB*lambda)/(tau2*n.XB + sigma2.XB)
tau2.XB.p <- sigma2.XB*tau2/(tau2*n.XB + sigma2.XB)
#sample a new value of mu.XB
mu.XB <- rnorm(1, lambda.XB.p, sqrt(tau2.XB.p))
#save the value of mu.XB
mu.XB.save[t] <- mu.XB
# full conditional of sigma2.XB (update the value of the parameters)
gamma.XB.p <- gamma + n.XB/2
phi.XB.p <- phi + sum((x.XB - mu.XB)^2 )/2
#sample new value of sigma2.XB
sigma2.XB <- rinvgamma(1, gamma.XB.p, phi.XB.p)
#save the value of sigma2.XB
sigma2.XB.save[t] <- sigma2.XB
}
# Trace plots (decide if we need to throw out the first few values)
par(mfrow=c(1,2))
plot(mu.MZ.save, type='l')
lines(mu.XB.save, col='red')
plot(sigma2.MZ.save, type='l')
lines(sigma2.XB.save, col='red')
#throw out the first few values
burn <- 100
mu.MZ.use <- mu.MZ.save[-(1:burn)]
sigma2.MZ.use <- sigma2.MZ.save[-(1:burn)]
mu.XB.use <- mu.XB.save[-(1:burn)]
sigma2.XB.use <- sigma2.XB.save[-(1:burn)]
plot(mu.MZ.use, type='l', ylim=c(3.8, 5))
lines(mu.XB.use, col='red')
plot(sigma2.MZ.use, type='l', ylim=c(.05, .6))
lines(sigma2.XB.use, col='red')
# posterior distribution of mu.MZ and mu.XB
#plot
plot(density(mu.MZ.use), xlab=expression(mu), ylab="density", main=expression(pi(mu~"|"~data)), xlim=c(3.8, 5))
lines(density(mu.XB.use), col='red')
#add legend
legend("topleft", c("Mill/genZ", "genX/Boom"), col=c("black", "red"), lty=1)
#98% credible interval
quantile(mu.MZ.use, c(.01, .99))
quantile(mu.XB.use, c(.01, .99))
#Given our data and prior knowledge, the probability that, on average, genX/boomers view servant leadership more highly than mill/genZ is 99.7%
mean(mu.MZ.use < mu.XB.use)
# posterior distribution of sigma2.MZ and sigma2.XB
par(mfrow=c(1,1))
plot(density(sigma2.MZ.use), xlab=expression(sigma^2), main=expression(pi(sigma^2~"|"~data)), xlim=c(.05, .65))
lines(density(sigma2.XB.use), col='red')
legend("topright", c("Mill/genZ", "genX/Boom"), col=c("black", "red"), lty=1)
#98% credible interval for sigma.MZ and sigma.XB
quantile(sqrt(sigma2.MZ.use), c(.01, .99))
quantile(sqrt(sigma2.XB.use), c(.01, .99))
#Given our data and prior knowledge, the probability that the variation between individual servant leadership scores for genX/boomers is greater than the variability among mill/genZ is 97.7%
mean(sigma2.MZ.use < sigma2.XB.use)
############################################
## Posterior predictive: pi(X*|data)
# We already have draws of (mu, sigma2) from the posterior distribution pi(mu, sigma2|data).  We can use those values to get draws of X*:
x.star <- rnorm(length(mu.use), mu.use, sqrt(sigma2.use))
plot(density(x.star), main="Posterior Predictive Distribution for Servant Leadership Score", xlab="X*")
############################################
## Posterior predictive: pi(X*|data)
# We already have draws of (mu, sigma2) from the posterior distribution pi(mu, sigma2|data).  We can use those values to get draws of X*:
x.star <- rnorm(length(mu.use), mu.use, sqrt(sigma2.use))
############################################
## Posterior predictive: pi(X*|data)
# We already have draws of (mu, sigma2) from the posterior distribution pi(mu, sigma2|data).  We can use those values to get draws of X*:
x.star <- rnorm(length(mu.XB.use), mu.XB.use, sqrt(sigma2.use))
############################################
## Posterior predictive: pi(X*|data)
# We already have draws of (mu, sigma2) from the posterior distribution pi(mu, sigma2|data).  We can use those values to get draws of X*:
x.star <- rnorm(length(mu.XB.use), mu.XB.use, sqrt(sigma2.XB.use))
plot(density(x.star), main="Posterior Predictive Distribution for Servant Leadership Score", xlab="X*")
#95% credible interval for the servant leadership score of a randomly selected person surveyed in these generations
quantile(x.star, c(.025, .975))
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/Store_Forecasting_Kaggle/")
train <- vroom("./train.csv")
test <- vroom("./test.csv")
item1 <- train %>% filter(store == 1, item == 25)
plot1 <- item1 %>%
ggplot(mapping = aes(x=data, y = sales)) +
geom_line() +
geom_smooth(se = FALSE)
plot1
plot1 <- item1 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE)
plot1
plot1 <- item1 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(title = 'Sales Over Time: Store 1, Item 25',
x = 'Date', y = 'Sales')
plot1
plot1 <- item1 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(title = 'Sales Over Time: Store 1 Item 25',
x = 'Date', y = 'Sales')
plot1
item1 %>% pull(sales) %>% forecast::ggAcf(.)
install.packages('forecast')
library(foregast)
library(forecast)
item1 %>% pull(sales) %>% forecast::ggAcf(.)
item1 %>% pull(sales) %>% forecast::ggAcf(., lag.max = 2*365)
acf_month_1 <- item1 %>% pull(sales) %>% forecast::ggAcf(.)
acf_year_1 <- item1 %>% pull(sales) %>% forecast::ggAcf(., lag.max = 2*365)
library(patchwork)
acf_month_1 <- item1 %>% pull(sales) %>% forecast::ggAcf(.)
acf_year_1 <- item1 %>% pull(sales) %>% forecast::ggAcf(., lag.max = 2*365)
item2 <- train %>% filter(store == 25, item == 25)
plot2 <- item2 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(title = 'Sales Over Time: Store 2 Item 25',
x = 'Date', y = 'Sales')
acf_month_2 <- item2 %>% pull(sales) %>% forecast::ggAcf(.)
item2 <- train %>% filter(store == 5, item == 25)
plot2 <- item2 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(title = 'Sales Over Time: Store 2 Item 25',
x = 'Date', y = 'Sales')
acf_month_2 <- item2 %>% pull(sales) %>% forecast::ggAcf(.)
acf_year_2 <- item2 %>% pull(sales) %>% forecast::ggAcf(., lag.max = 2*365)
(plot1 + acf_month_1 + acf_year_1)/(plot2 + acf_month_2 + acf_year_2)
plot2 <- item2 %>%
ggplot(mapping = aes(x=date, y = sales)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(title = 'Sales Over Time: Store 5 Item 25',
x = 'Date', y = 'Sales')
acf_month_2 <- item2 %>% pull(sales) %>% forecast::ggAcf(.)
acf_year_2 <- item2 %>% pull(sales) %>% forecast::ggAcf(., lag.max = 2*365)
(plot1 + acf_month_1 + acf_year_1)/(plot2 + acf_month_2 + acf_year_2)
reticulate::repl_python()
