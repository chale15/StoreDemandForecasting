list(
x = 0.2,
y = 1.0,
text = "Plot 1",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Plot 2",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "Plot 3",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "Plot 4",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "Plot 1",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Plot 2",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "Plot 3",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "Plot 4",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(tidyverse)
library(ggplot2)
library(invgamma)
data_WE <- c(0.65, 0.68, 0.68, 0.69, 0.71, 0.72, 0.72, 0.72, 0.72, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.82, 0.82, 0.82, 0.83, 0.83, 0.83, 0.83, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.88, 0.88, 0.9, 0.91)
prior_mean <- c(0.7, 100)      #Normal Prior for Mean
prior_var <- c(2.001, 0.08)   #Inverse Gamma Prior for Variance
mu <- 0.7
sigma2 <- 100
iters <- 100000
n <- length(data_WE)
mu.save <- rep(0, iters)
mu.save[1] <- mu
sigma2.save <- rep(0, iters)
sigma2.save[1] <- sigma2
for(i in 2:iters){
lambda.temp <- (prior_mean[2]*sum(data_WE) + sigma2*prior_mean[1])/(prior_mean[2]*n + sigma2)
tau2.temp <- sigma2*prior_mean[2]/(prior_mean[2]*n + sigma2)
mu <- rnorm(1, lambda.temp, sqrt(tau2.temp))
mu.save[i] <- mu
gamma.temp <- prior_var[1] + n/2
phi.temp <- prior_var[2] + sum((data_WE - mu)^2 )/2
sigma2 <- rinvgamma(1, gamma.temp, phi.temp)
sigma2.save[i] <- sigma2
}
par(mfrow=c(1,2))
plot(mu.save, type='l')
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(tidyverse)
library(ggplot2)
library(invgamma)
data_WE <- c(0.65, 0.68, 0.68, 0.69, 0.71, 0.72, 0.72, 0.72, 0.72, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.82, 0.82, 0.82, 0.83, 0.83, 0.83, 0.83, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.88, 0.88, 0.9, 0.91)
prior_mean <- c(0.7, 100)      #Normal Prior for Mean
prior_var <- c(2.001, 0.08)   #Inverse Gamma Prior for Variance
mu <- 0.7
sigma2 <- 100
iters <- 100000
n <- length(data_WE)
mu.save <- rep(0, iters)
mu.save[1] <- mu
sigma2.save <- rep(0, iters)
sigma2.save[1] <- sigma2
for(i in 2:iters){
lambda.temp <- (prior_mean[2]*sum(data_WE) + sigma2*prior_mean[1])/(prior_mean[2]*n + sigma2)
tau2.temp <- sigma2*prior_mean[2]/(prior_mean[2]*n + sigma2)
mu <- rnorm(1, lambda.temp, sqrt(tau2.temp))
mu.save[i] <- mu
gamma.temp <- prior_var[1] + n/2
phi.temp <- prior_var[2] + sum((data_WE - mu)^2 )/2
sigma2 <- rinvgamma(1, gamma.temp, phi.temp)
sigma2.save[i] <- sigma2
}
plot(mu.save, type='l')
data_WE <- c(0.65, 0.68, 0.68, 0.69, 0.71, 0.72, 0.72, 0.72, 0.72, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.82, 0.82, 0.82, 0.83, 0.83, 0.83, 0.83, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.88, 0.88, 0.9, 0.91)
prior_mean <- c(0.7, 100)      #Normal Prior for Mean
prior_var <- c(2.001, 0.08)   #Inverse Gamma Prior for Variance
mu <- 0.7
sigma2 <- 100
iters <- 100000
n <- length(data_WE)
burn <- 100
mu.save <- rep(0, iters)
mu.save[1] <- mu
sigma2.save <- rep(0, iters)
sigma2.save[1] <- sigma2
for(i in 2:iters){
lambda.temp <- (prior_mean[2]*sum(data_WE) + sigma2*prior_mean[1])/(prior_mean[2]*n + sigma2)
tau2.temp <- sigma2*prior_mean[2]/(prior_mean[2]*n + sigma2)
mu <- rnorm(1, lambda.temp, sqrt(tau2.temp))
mu.save[i] <- mu
gamma.temp <- prior_var[1] + n/2
phi.temp <- prior_var[2] + sum((data_WE - mu)^2 )/2
sigma2 <- rinvgamma(1, gamma.temp, phi.temp)
sigma2.save[i] <- sigma2
}
mu.use <- mu.save[-(1:burn)]
sigma2.use <- sigma2.save[-(1:burn)]
plot(mu.use, type='l')
plot(sigma2.use, type='l')
plot(density(mu.use), xlab=expression(mu), ylab="density", main=expression(pi(mu~"|"~data)))
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression(pi(mu ~ "|" ~ data))
) +
theme_minimal()
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression(pi(mu ~ "|" ~ data))
) +
theme_minimal()
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression("Posterior Probability" ~pi(mu ~ "|" ~ data))
) +
theme_minimal()
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression("Posterior Probability: " ~pi(mu ~ "|" ~ data))
) +
theme_minimal()
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression("Posterior Probability on Mean (WE): " ~pi(mu ~ "|" ~ data))
) +
theme_minimal()
sigma2_density <- data.frame(x = density(sigma2.use)$x, y = density(sigma2.use)$y)
ggplot(sigma2_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(sigma^2),
y = "Density",
title = expression("Posterior Probability on Variance (WE): " ~pi(sigma^2 ~ "|" ~ data))
) +
theme_minimal()
mu_density <- data.frame(x = density(mu.use)$x, y = density(mu.use)$y)
ggplot(mu_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression("Marginal Posterior Probability on Mean (WE): " ~pi(mu ~ "|" ~ data))
) +
theme_minimal()
sigma2_density <- data.frame(x = density(sigma2.use)$x, y = density(sigma2.use)$y)
ggplot(sigma2_density, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(sigma^2),
y = "Density",
title = expression("Marginal Posterior Probability on Variance (WE): "~pi(sigma^2 ~"|"~data))
) +
theme_minimal()
data_EA <- c(0.54, 0.54, 0.57, 0.57, 0.6, 0.6, 0.61, 0.63, 0.64, 0.65, 0.65, 0.66, 0.66, 0.66, 0.67, 0.68,0.68, 0.68, 0.68, 0.69, 0.69, 0.69, 0.7, 0.7, 0.7, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.76, 0.77, 0.78, 0.8, 0.8, 0.8, 0.84, 0.85, 0.87)
mu <- 0.7
sigma2 <- 100
n <- length(data_EA)
mu.save2 <- rep(0, iters)
mu.save2[1] <- mu
sigma2.save2 <- rep(0, iters)
sigma2.save2[1] <- sigma2
for(i in 2:iters){
lambda.temp2 <- (prior_mean[2]*sum(data_EA) + sigma2*prior_mean[1])/(prior_mean[2]*n + sigma2)
tau2.temp2 <- sigma2*prior_mean[2]/(prior_mean[2]*n + sigma2)
mu <- rnorm(1, lambda.temp2, sqrt(tau2.temp2))
mu.save2[i] <- mu
gamma.temp2 <- prior_var[1] + n/2
phi.temp2 <- prior_var[2] + sum((data_EA - mu)^2 )/2
sigma2 <- rinvgamma(1, gamma.temp2, phi.temp2)
sigma2.save2[i] <- sigma2
}
mu.use2 <- mu.save2[-(1:burn)]
sigma2.use2 <- sigma2.save2[-(1:burn)]
mu_density2 <- data.frame(x = density(mu.use2)$x, y = density(mu.use2)$y)
ggplot(mu_density2, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu),
y = "Density",
title = expression("Marginal Posterior Probability on Mean (EA): " ~pi(mu ~ "|" ~ data))
) +
theme_minimal()
sigma2_density2 <- data.frame(x = density(sigma2.use2)$x, y = density(sigma2.use2)$y)
ggplot(sigma2_density2, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(sigma^2),
y = "Density",
title = expression("Marginal Posterior Probability on Variance (EA): "~pi(sigma^2 ~"|"~data))
) +
theme_minimal()
diff <- mu.use - mu.use2
diff_mean_df <- data.frame(x = density(diff)$x, y = density(diff)$y)
ggplot(diff_mean_df, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(mu[WE] - mu[EA]),
y = "Density",
title = expression("Posterior Distribution of Difference in Means: "~(mu[W]-mu[E]) ~"|"~data)
) +
theme_minimal()
diff_sigma2 <- sigma2.use - sigma2.use2
diff_sigma2_df <- data.frame(x = density(diff_sigma2)$x, y = density(diff_sigma2)$y)
ggplot(diff_sigma2_df, aes(x = x, y = y)) +
geom_line() +
labs(
x = expression(sigma[WE]^2 - sigma[EA]^2),
y = "Density",
title = expression("Posterior Distribution of Difference in Variances: "~(sigma[W]^2-sigma[E]^2) ~"|"~data)
) +
theme_minimal()
install.packages('prophet')
install.packages("prophet")
library(prophet)
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(auto_arima)
library(plotly)
library(prophet)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/Store_Forecasting_Kaggle/")
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
train <- fulltrain %>% filter(store == 5, item == 25)
test <- fulltest %>% filter(store == 5, item == 25)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
my_recipe <- recipe(sales~., data = train) %>%
step_date(date, features=c('doy', 'decimal')) %>%
step_date(date, features = c('dow', 'month'), label = FALSE) %>%
step_range(date_doy, min=0, max=pi) %>%
step_mutate(sinDOY=sin(date_doy), cosDOY=cos(date_doy)) %>%
#  step_mutate(sat_after_payday = ifelse((date_dow == 7) && (date_doy %in% c(2,3,4,5,6,7, 16, 17, 18, 19, 20, 21, 22)), 1, 0)) %>%
step_lag(date, lag=7) %>%
#  step_lag(date, lag=365) %>%
step_mutate_at(c(date_dow, date_month), fn = factor) %>%
step_rm(store, item, date_doy)
prepped <- prep(my_recipe, data = train)
baked <- bake(prepped, new_data = NULL)
prophet_model <- prophet_reg() %>%
set_engine('prophet')
prophet_workflow <- workflow() %>%
add_model(prophet_model) %>%
#  add_recipe(my_recipe) %>%
fit(sales ~ date, data=training(cv_split))
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
prophet_workflow <- workflow() %>%
add_model(prophet_model)
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p1
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
p2
train <- fulltrain %>% filter(store == 2, item == 15)
test <- fulltest %>% filter(store == 2, item == 15)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
p1
full_fit <- cv_results %>%
modeltime_refit(data = train)
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
p2
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
train <- fulltrain %>% filter(store == 5, item == 25)
test <- fulltest %>% filter(store == 5, item == 25)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
train <- fulltrain %>% filter(store == 2, item == 15)
test <- fulltest %>% filter(store == 2, item == 15)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p3 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 2 Item 15')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p4 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 2 Item 15')
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
